// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.approveUserByEmailStmt, err = db.PrepareContext(ctx, approveUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ApproveUserByEmail: %w", err)
	}
	if q.approveUserByIdStmt, err = db.PrepareContext(ctx, approveUserById); err != nil {
		return nil, fmt.Errorf("error preparing query ApproveUserById: %w", err)
	}
	if q.approveUserByUsernameStmt, err = db.PrepareContext(ctx, approveUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query ApproveUserByUsername: %w", err)
	}
	if q.blacklistUserByEmailStmt, err = db.PrepareContext(ctx, blacklistUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query BlacklistUserByEmail: %w", err)
	}
	if q.blacklistUserByIdStmt, err = db.PrepareContext(ctx, blacklistUserById); err != nil {
		return nil, fmt.Errorf("error preparing query BlacklistUserById: %w", err)
	}
	if q.blacklistUserByUsernameStmt, err = db.PrepareContext(ctx, blacklistUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query BlacklistUserByUsername: %w", err)
	}
	if q.createUserRecordStmt, err = db.PrepareContext(ctx, createUserRecord); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserRecord: %w", err)
	}
	if q.deleteUserByEmailStmt, err = db.PrepareContext(ctx, deleteUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByEmail: %w", err)
	}
	if q.deleteUserByIdStmt, err = db.PrepareContext(ctx, deleteUserById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserById: %w", err)
	}
	if q.deleteUserByUserNameStmt, err = db.PrepareContext(ctx, deleteUserByUserName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByUserName: %w", err)
	}
	if q.forcePasswordChangeByEmailStmt, err = db.PrepareContext(ctx, forcePasswordChangeByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ForcePasswordChangeByEmail: %w", err)
	}
	if q.forcePasswordChangeByIdStmt, err = db.PrepareContext(ctx, forcePasswordChangeById); err != nil {
		return nil, fmt.Errorf("error preparing query ForcePasswordChangeById: %w", err)
	}
	if q.forcePasswordChangeByUsernameStmt, err = db.PrepareContext(ctx, forcePasswordChangeByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query ForcePasswordChangeByUsername: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByIdentifierStmt, err = db.PrepareContext(ctx, getUserByIdentifier); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByIdentifier: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersApproverStmt, err = db.PrepareContext(ctx, getUsersApprover); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersApprover: %w", err)
	}
	if q.getUsersOfAccountTypeStmt, err = db.PrepareContext(ctx, getUsersOfAccountType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersOfAccountType: %w", err)
	}
	if q.updateAccountTypeByEmailStmt, err = db.PrepareContext(ctx, updateAccountTypeByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountTypeByEmail: %w", err)
	}
	if q.updateAccountTypeByIdStmt, err = db.PrepareContext(ctx, updateAccountTypeById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountTypeById: %w", err)
	}
	if q.updateAccountTypeByUsernameStmt, err = db.PrepareContext(ctx, updateAccountTypeByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountTypeByUsername: %w", err)
	}
	if q.updatePasswordByEmailStmt, err = db.PrepareContext(ctx, updatePasswordByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePasswordByEmail: %w", err)
	}
	if q.updatePasswordByUsernameStmt, err = db.PrepareContext(ctx, updatePasswordByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePasswordByUsername: %w", err)
	}
	if q.updatePasswordByidStmt, err = db.PrepareContext(ctx, updatePasswordByid); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePasswordByid: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.approveUserByEmailStmt != nil {
		if cerr := q.approveUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing approveUserByEmailStmt: %w", cerr)
		}
	}
	if q.approveUserByIdStmt != nil {
		if cerr := q.approveUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing approveUserByIdStmt: %w", cerr)
		}
	}
	if q.approveUserByUsernameStmt != nil {
		if cerr := q.approveUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing approveUserByUsernameStmt: %w", cerr)
		}
	}
	if q.blacklistUserByEmailStmt != nil {
		if cerr := q.blacklistUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing blacklistUserByEmailStmt: %w", cerr)
		}
	}
	if q.blacklistUserByIdStmt != nil {
		if cerr := q.blacklistUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing blacklistUserByIdStmt: %w", cerr)
		}
	}
	if q.blacklistUserByUsernameStmt != nil {
		if cerr := q.blacklistUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing blacklistUserByUsernameStmt: %w", cerr)
		}
	}
	if q.createUserRecordStmt != nil {
		if cerr := q.createUserRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserRecordStmt: %w", cerr)
		}
	}
	if q.deleteUserByEmailStmt != nil {
		if cerr := q.deleteUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByEmailStmt: %w", cerr)
		}
	}
	if q.deleteUserByIdStmt != nil {
		if cerr := q.deleteUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIdStmt: %w", cerr)
		}
	}
	if q.deleteUserByUserNameStmt != nil {
		if cerr := q.deleteUserByUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByUserNameStmt: %w", cerr)
		}
	}
	if q.forcePasswordChangeByEmailStmt != nil {
		if cerr := q.forcePasswordChangeByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing forcePasswordChangeByEmailStmt: %w", cerr)
		}
	}
	if q.forcePasswordChangeByIdStmt != nil {
		if cerr := q.forcePasswordChangeByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing forcePasswordChangeByIdStmt: %w", cerr)
		}
	}
	if q.forcePasswordChangeByUsernameStmt != nil {
		if cerr := q.forcePasswordChangeByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing forcePasswordChangeByUsernameStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByIdentifierStmt != nil {
		if cerr := q.getUserByIdentifierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdentifierStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersApproverStmt != nil {
		if cerr := q.getUsersApproverStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersApproverStmt: %w", cerr)
		}
	}
	if q.getUsersOfAccountTypeStmt != nil {
		if cerr := q.getUsersOfAccountTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersOfAccountTypeStmt: %w", cerr)
		}
	}
	if q.updateAccountTypeByEmailStmt != nil {
		if cerr := q.updateAccountTypeByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountTypeByEmailStmt: %w", cerr)
		}
	}
	if q.updateAccountTypeByIdStmt != nil {
		if cerr := q.updateAccountTypeByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountTypeByIdStmt: %w", cerr)
		}
	}
	if q.updateAccountTypeByUsernameStmt != nil {
		if cerr := q.updateAccountTypeByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountTypeByUsernameStmt: %w", cerr)
		}
	}
	if q.updatePasswordByEmailStmt != nil {
		if cerr := q.updatePasswordByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordByEmailStmt: %w", cerr)
		}
	}
	if q.updatePasswordByUsernameStmt != nil {
		if cerr := q.updatePasswordByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordByUsernameStmt: %w", cerr)
		}
	}
	if q.updatePasswordByidStmt != nil {
		if cerr := q.updatePasswordByidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordByidStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                DBTX
	tx                                *sql.Tx
	approveUserByEmailStmt            *sql.Stmt
	approveUserByIdStmt               *sql.Stmt
	approveUserByUsernameStmt         *sql.Stmt
	blacklistUserByEmailStmt          *sql.Stmt
	blacklistUserByIdStmt             *sql.Stmt
	blacklistUserByUsernameStmt       *sql.Stmt
	createUserRecordStmt              *sql.Stmt
	deleteUserByEmailStmt             *sql.Stmt
	deleteUserByIdStmt                *sql.Stmt
	deleteUserByUserNameStmt          *sql.Stmt
	forcePasswordChangeByEmailStmt    *sql.Stmt
	forcePasswordChangeByIdStmt       *sql.Stmt
	forcePasswordChangeByUsernameStmt *sql.Stmt
	getAllUsersStmt                   *sql.Stmt
	getUserByEmailStmt                *sql.Stmt
	getUserByIdStmt                   *sql.Stmt
	getUserByIdentifierStmt           *sql.Stmt
	getUserByUsernameStmt             *sql.Stmt
	getUsersApproverStmt              *sql.Stmt
	getUsersOfAccountTypeStmt         *sql.Stmt
	updateAccountTypeByEmailStmt      *sql.Stmt
	updateAccountTypeByIdStmt         *sql.Stmt
	updateAccountTypeByUsernameStmt   *sql.Stmt
	updatePasswordByEmailStmt         *sql.Stmt
	updatePasswordByUsernameStmt      *sql.Stmt
	updatePasswordByidStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                tx,
		tx:                                tx,
		approveUserByEmailStmt:            q.approveUserByEmailStmt,
		approveUserByIdStmt:               q.approveUserByIdStmt,
		approveUserByUsernameStmt:         q.approveUserByUsernameStmt,
		blacklistUserByEmailStmt:          q.blacklistUserByEmailStmt,
		blacklistUserByIdStmt:             q.blacklistUserByIdStmt,
		blacklistUserByUsernameStmt:       q.blacklistUserByUsernameStmt,
		createUserRecordStmt:              q.createUserRecordStmt,
		deleteUserByEmailStmt:             q.deleteUserByEmailStmt,
		deleteUserByIdStmt:                q.deleteUserByIdStmt,
		deleteUserByUserNameStmt:          q.deleteUserByUserNameStmt,
		forcePasswordChangeByEmailStmt:    q.forcePasswordChangeByEmailStmt,
		forcePasswordChangeByIdStmt:       q.forcePasswordChangeByIdStmt,
		forcePasswordChangeByUsernameStmt: q.forcePasswordChangeByUsernameStmt,
		getAllUsersStmt:                   q.getAllUsersStmt,
		getUserByEmailStmt:                q.getUserByEmailStmt,
		getUserByIdStmt:                   q.getUserByIdStmt,
		getUserByIdentifierStmt:           q.getUserByIdentifierStmt,
		getUserByUsernameStmt:             q.getUserByUsernameStmt,
		getUsersApproverStmt:              q.getUsersApproverStmt,
		getUsersOfAccountTypeStmt:         q.getUsersOfAccountTypeStmt,
		updateAccountTypeByEmailStmt:      q.updateAccountTypeByEmailStmt,
		updateAccountTypeByIdStmt:         q.updateAccountTypeByIdStmt,
		updateAccountTypeByUsernameStmt:   q.updateAccountTypeByUsernameStmt,
		updatePasswordByEmailStmt:         q.updatePasswordByEmailStmt,
		updatePasswordByUsernameStmt:      q.updatePasswordByUsernameStmt,
		updatePasswordByidStmt:            q.updatePasswordByidStmt,
	}
}
