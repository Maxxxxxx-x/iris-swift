// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: api_key.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO api_key
(id, api_key_hash, name, desc, created_by, expires_at)
VALUES
(?, ?, ?, ?, ?, ?) RETURNING id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id
`

type CreateApiKeyParams struct {
	ID         string         `json:"id"`
	ApiKeyHash string         `json:"api_key_hash"`
	Name       string         `json:"name"`
	Desc       sql.NullString `json:"desc"`
	CreatedBy  string         `json:"created_by"`
	ExpiresAt  sql.NullTime   `json:"expires_at"`
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (ApiKey, error) {
	row := q.queryRow(ctx, q.createApiKeyStmt, createApiKey,
		arg.ID,
		arg.ApiKeyHash,
		arg.Name,
		arg.Desc,
		arg.CreatedBy,
		arg.ExpiresAt,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ApiKeyHash,
		&i.Name,
		&i.Desc,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.RevokedReason,
		&i.UsageCount,
		&i.LastUsedAt,
		&i.LastUsedIp,
		&i.LastUsedID,
	)
	return i, err
}

const deleteApiKeyById = `-- name: DeleteApiKeyById :exec
DELETE FROM api_key WHERE id = ?
`

func (q *Queries) DeleteApiKeyById(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteApiKeyByIdStmt, deleteApiKeyById, id)
	return err
}

const deleteApiKeysFromuser = `-- name: DeleteApiKeysFromuser :exec
DELETE FROM api_key WHERE created_by = ?
`

func (q *Queries) DeleteApiKeysFromuser(ctx context.Context, createdBy string) error {
	_, err := q.exec(ctx, q.deleteApiKeysFromuserStmt, deleteApiKeysFromuser, createdBy)
	return err
}

const deleteRevokedApiKeys = `-- name: DeleteRevokedApiKeys :exec
DELETE FROM api_key WHERE is_revoked = 1
`

func (q *Queries) DeleteRevokedApiKeys(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteRevokedApiKeysStmt, deleteRevokedApiKeys)
	return err
}

const getAllApiKeys = `-- name: GetAllApiKeys :many
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key ORDER BY created_at DESC
`

func (q *Queries) GetAllApiKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.query(ctx, q.getAllApiKeysStmt, getAllApiKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyHash,
			&i.Name,
			&i.Desc,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.RevokedReason,
			&i.UsageCount,
			&i.LastUsedAt,
			&i.LastUsedIp,
			&i.LastUsedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllApiKeysFromUserId = `-- name: GetAllApiKeysFromUserId :many
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key WHERE created_by = ?
ORDER BY created_at DESC
`

func (q *Queries) GetAllApiKeysFromUserId(ctx context.Context, createdBy string) ([]ApiKey, error) {
	rows, err := q.query(ctx, q.getAllApiKeysFromUserIdStmt, getAllApiKeysFromUserId, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyHash,
			&i.Name,
			&i.Desc,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.RevokedReason,
			&i.UsageCount,
			&i.LastUsedAt,
			&i.LastUsedIp,
			&i.LastUsedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApiKeyById = `-- name: GetApiKeyById :one
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key WHERE id = ? LIMIT 1
`

func (q *Queries) GetApiKeyById(ctx context.Context, id string) (ApiKey, error) {
	row := q.queryRow(ctx, q.getApiKeyByIdStmt, getApiKeyById, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ApiKeyHash,
		&i.Name,
		&i.Desc,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.RevokedReason,
		&i.UsageCount,
		&i.LastUsedAt,
		&i.LastUsedIp,
		&i.LastUsedID,
	)
	return i, err
}

const getApiKeysByRevokerId = `-- name: GetApiKeysByRevokerId :many
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key WHERE revoked_by = ?
ORDER BY revoked_at DESC
`

func (q *Queries) GetApiKeysByRevokerId(ctx context.Context, revokedBy sql.NullString) ([]ApiKey, error) {
	rows, err := q.query(ctx, q.getApiKeysByRevokerIdStmt, getApiKeysByRevokerId, revokedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyHash,
			&i.Name,
			&i.Desc,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.RevokedReason,
			&i.UsageCount,
			&i.LastUsedAt,
			&i.LastUsedIp,
			&i.LastUsedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRevokedApiKeys = `-- name: GetRevokedApiKeys :many
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key WHERE is_revoked = 1
ORDER BY revoked_at DESC
`

func (q *Queries) GetRevokedApiKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.query(ctx, q.getRevokedApiKeysStmt, getRevokedApiKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyHash,
			&i.Name,
			&i.Desc,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.RevokedReason,
			&i.UsageCount,
			&i.LastUsedAt,
			&i.LastUsedIp,
			&i.LastUsedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRevokedApiKeysFromUser = `-- name: GetRevokedApiKeysFromUser :many
SELECT id, api_key_hash, name, "desc", created_by, created_at, expires_at, is_revoked, revoked_at, revoked_by, revoked_reason, usage_count, last_used_at, last_used_ip, last_used_id FROM api_key WHERE is_revoked = 1 AND created_by = ? ORDER BY revoked_at DESC
`

func (q *Queries) GetRevokedApiKeysFromUser(ctx context.Context, createdBy string) ([]ApiKey, error) {
	rows, err := q.query(ctx, q.getRevokedApiKeysFromUserStmt, getRevokedApiKeysFromUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ApiKeyHash,
			&i.Name,
			&i.Desc,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.RevokedAt,
			&i.RevokedBy,
			&i.RevokedReason,
			&i.UsageCount,
			&i.LastUsedAt,
			&i.LastUsedIp,
			&i.LastUsedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeApiKeyById = `-- name: RevokeApiKeyById :exec
UPDATE api_key
SET
    is_revoked = 1,
    revoked_by = ?,
    revoked_at = ?
WHERE id = ?
`

type RevokeApiKeyByIdParams struct {
	RevokedBy sql.NullString `json:"revoked_by"`
	RevokedAt sql.NullTime   `json:"revoked_at"`
	ID        string         `json:"id"`
}

func (q *Queries) RevokeApiKeyById(ctx context.Context, arg RevokeApiKeyByIdParams) error {
	_, err := q.exec(ctx, q.revokeApiKeyByIdStmt, revokeApiKeyById, arg.RevokedBy, arg.RevokedAt, arg.ID)
	return err
}

const revokeApiKeysFromUser = `-- name: RevokeApiKeysFromUser :exec
UPDATE api_key
SET
    is_revoked = 1,
    revoked_by = ?,
    revoked_at = ?
WHERE created_by = ?
`

type RevokeApiKeysFromUserParams struct {
	RevokedBy sql.NullString `json:"revoked_by"`
	RevokedAt sql.NullTime   `json:"revoked_at"`
	CreatedBy string         `json:"created_by"`
}

func (q *Queries) RevokeApiKeysFromUser(ctx context.Context, arg RevokeApiKeysFromUserParams) error {
	_, err := q.exec(ctx, q.revokeApiKeysFromUserStmt, revokeApiKeysFromUser, arg.RevokedBy, arg.RevokedAt, arg.CreatedBy)
	return err
}
